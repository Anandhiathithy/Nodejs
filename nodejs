What is Node.js?

    Node.js is an open source server environment
    Node.js is free
    Node.js runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
    Node.js uses JavaScript on the server

A common task for a web server can be to open a file on the server and return the content to the client.

Here is how PHP or ASP handles a file request:

    1.Sends the task to the computer's file system.
    2. Waits while the file system opens and reads the file.
    3.Returns the content to the client.
    4.Ready to handle the next request.

Here is how Node.js handles a file request:

    1. Sends the task to the computer's file system.
    2.Ready to handle the next request.
    3. When the file system has opened and read the file, the server returns the content to the client.

Node.js eliminates the waiting, and simply continues with the next request.

Node.js runs single-threaded, non-blocking, asynchronous programming, which is very memory efficient.


Node.js Express Framework

Express is a flexible Node.js web application framework that provides a wide set of features to develop both web and mobile applications. It's a layer built on the top of the Node.js that helps manage a server and routes.

Now look at some of the core features of the Express framework:

  1.  Used for designing single-page, multi-page, and hybrid web applications
  2.  Allows developers to set up middlewares for responding to HTTP Requests
  3. Defines a routing table that is used to perform different actions based on the HTTP method and URL
  4. Allows dynamic rendering of HTML Pages based on passing arguments to templates

Now look at an example of a simple "Hello World" program developed using the Express framework to gain a better understanding of this framework.
var express=require('express');
var app=express();
app.get('/',function (req,res)[
res.send('Hello World');
})
var server=app.listen(8081,function(){
var host=server.address().address
car port=server.address().port
console.log("Example app listening at http://%s:%s",host,port)
})


    *var express: Importing Express framework into our Node.js application
    *app.get(): Callback function with parameters ‘request’ and ‘response’
    *The request object: It represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, etc.
    *The response object: It represents the HTTP response that an Express app sends when it gets an HTTP request.
    *The application will listen to the defined port, which in this case is "8081," and variables "host" and "port" will contain the address and the port, respectively.
    console.log: This is to show the address and port in the command prompt or terminal.

Having learned about the Express framework, let's now move on to the use cases of Node.js.
When Can We Use NodeJS?

When very few CPU cycles are used by the server side code. When the non-blocking operations are done by us and that does not have heavy jobs or heavy algorithms that consume a lot of CPU cycles.

If we are already from JavaScript background and we are very comfortable in writing single threaded code just like client side JavaScript.

Now let us know when not to use NodeJs:

    NodeJS is a very CPU heavy application , when it comes to heavy computation, NodeJS is not the best option in hand. Other than NodeJs, there are plenty of better solutions available for CPU intensive applications.

Using a single CPU, an event based non blocking I/O model is leveraged by NodeJS and for that reason the incoming request will be actually blocked by all the intense CPU processing activity.

    When using NodeJs with basic crud or HTML application there is no need for high hopes . Though NodeJs will make it more scalable, there is no need for expecting  a traffic flood only because the application is powered by NodeJs. So when the data is provided straightforwardly by, by the server and specially where there is no need to have  a separate API, in this case there is no need for using NodeJs.
    For Relational database access type of projects, using NodeJs is not an efficient idea at all. In comparison with the other framework’s tool boxes, the relational database tools of NodeJs are not that robust, reliable and easy to work with.

Let us now go through the installation procedure of NodeJs. 

So for the installation of NodeJs, we need to follow a very straightforward process. This can be done by the installer package available at the official website of NodeJs.

   1.  So for the first step, the installer from the official NodeJs website needs to be downloaded.
   2. Then the installer needs to be run.
   3. Then the simple installer steps need to be followed properly. The license agreement needs to be agreed and then click the next button.
   4. Then your system or machine needs a restart. That’s it, we are done with the NodeJs installation.

So far, we have got a good idea on NodeJs and when we have realized we should use it for our server side application.

Create a Node.js file named "myfirst.js", and add the following code:
**********

myfirst.js
var http = require('http');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.end('Hello World!');
}).listen(8080);

**********

Save the file on your computer: C:\Users\Your Name\myfirst.js

The code tells the computer to write "Hello World!" if anyone (e.g. a web browser) tries to access your computer on port 8080.

For now, you do not have to understand the code. It will be explained later.***

What is a Module in Node.js?

*Consider modules to be the same as JavaScript libraries.

*A set of functions you want to include in your application.

1.Built-in Modules

*Node.js has a set of built-in modules which you can use without any further installation.

*Look at our Built-in Modules Reference for a complete list of modules.

2. Modules

To include a module, use the require() function with the name of the module:

var http = require('http');

Now your application has access to the HTTP module, and is able to create a server:


http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.end('Hello World!');
}).listen(8080);
